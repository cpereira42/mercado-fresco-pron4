// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	section "github.com/cpereira42/mercado-fresco-pron4/internal/section"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateSection provides a mock function with given fields: _a0
func (_m *Service) CreateSection(_a0 section.SectionRequestCreate) (section.SectionRequestCreate, error) {
	ret := _m.Called(_a0)

	var r0 section.SectionRequestCreate
	if rf, ok := ret.Get(0).(func(section.SectionRequestCreate) section.SectionRequestCreate); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(section.SectionRequestCreate)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(section.SectionRequestCreate) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSection provides a mock function with given fields: id
func (_m *Service) DeleteSection(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListarSectionAll provides a mock function with given fields:
func (_m *Service) ListarSectionAll() ([]section.Section, error) {
	ret := _m.Called()

	var r0 []section.Section
	if rf, ok := ret.Get(0).(func() []section.Section); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]section.Section)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListarSectionOne provides a mock function with given fields: id
func (_m *Service) ListarSectionOne(id int64) (section.Section, error) {
	ret := _m.Called(id)

	var r0 section.Section
	if rf, ok := ret.Get(0).(func(int64) section.Section); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(section.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSection provides a mock function with given fields: id, sectionUp
func (_m *Service) UpdateSection(id int64, sectionUp section.SectionRequestUpdate) (section.Section, error) {
	ret := _m.Called(id, sectionUp)

	var r0 section.Section
	if rf, ok := ret.Get(0).(func(int64, section.SectionRequestUpdate) section.Section); ok {
		r0 = rf(id, sectionUp)
	} else {
		r0 = ret.Get(0).(section.Section)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, section.SectionRequestUpdate) error); ok {
		r1 = rf(id, sectionUp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
