// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	seller "github.com/cpereira42/mercado-fresco-pron4/internal/seller"
	mock "github.com/stretchr/testify/mock"
)

// RepositorySeller is an autogenerated mock type for the RepositorySeller type
type RepositorySeller struct {
	mock.Mock
}

// CheckLocality provides a mock function with given fields: id
func (_m *RepositorySeller) CheckLocality(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: cid, company, address, telephone, localityId
func (_m *RepositorySeller) Create(cid string, company string, address string, telephone string, localityId int) (seller.Seller, error) {
	ret := _m.Called(cid, company, address, telephone, localityId)

	var r0 seller.Seller
	if rf, ok := ret.Get(0).(func(string, string, string, string, int) seller.Seller); ok {
		r0 = rf(cid, company, address, telephone, localityId)
	} else {
		r0 = ret.Get(0).(seller.Seller)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, int) error); ok {
		r1 = rf(cid, company, address, telephone, localityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *RepositorySeller) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *RepositorySeller) GetAll() ([]seller.Seller, error) {
	ret := _m.Called()

	var r0 []seller.Seller
	if rf, ok := ret.Get(0).(func() []seller.Seller); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]seller.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetId provides a mock function with given fields: id
func (_m *RepositorySeller) GetId(id int) (seller.Seller, error) {
	ret := _m.Called(id)

	var r0 seller.Seller
	if rf, ok := ret.Get(0).(func(int) seller.Seller); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(seller.Seller)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, cid, company, adress, telephone, localityId
func (_m *RepositorySeller) Update(id int, cid string, company string, adress string, telephone string, localityId int) (seller.Seller, error) {
	ret := _m.Called(id, cid, company, adress, telephone, localityId)

	var r0 seller.Seller
	if rf, ok := ret.Get(0).(func(int, string, string, string, string, int) seller.Seller); ok {
		r0 = rf(id, cid, company, adress, telephone, localityId)
	} else {
		r0 = ret.Get(0).(seller.Seller)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, string, string, string, int) error); ok {
		r1 = rf(id, cid, company, adress, telephone, localityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositorySeller interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositorySeller creates a new instance of RepositorySeller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositorySeller(t mockConstructorTestingTNewRepositorySeller) *RepositorySeller {
	mock := &RepositorySeller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
