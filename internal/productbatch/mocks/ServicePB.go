// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	productbatch "github.com/cpereira42/mercado-fresco-pron4/internal/productbatch"
	mock "github.com/stretchr/testify/mock"
)

// ServicePB is an autogenerated mock type for the ServicePB type
type ServicePB struct {
	mock.Mock
}

// CreatePB provides a mock function with given fields: productBatches
func (_m *ServicePB) CreatePB(productBatches productbatch.ProductBatches) (productbatch.ProductBatches, error) {
	ret := _m.Called(productBatches)

	var r0 productbatch.ProductBatches
	if rf, ok := ret.Get(0).(func(productbatch.ProductBatches) productbatch.ProductBatches); ok {
		r0 = rf(productBatches)
	} else {
		r0 = ret.Get(0).(productbatch.ProductBatches)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productbatch.ProductBatches) error); ok {
		r1 = rf(productBatches)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadPBSectionId provides a mock function with given fields: id
func (_m *ServicePB) ReadPBSectionId(id int64) (productbatch.ProductBatchesResponse, error) {
	ret := _m.Called(id)

	var r0 productbatch.ProductBatchesResponse
	if rf, ok := ret.Get(0).(func(int64) productbatch.ProductBatchesResponse); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productbatch.ProductBatchesResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadPBSectionTodo provides a mock function with given fields:
func (_m *ServicePB) ReadPBSectionTodo() ([]productbatch.ProductBatchesResponse, error) {
	ret := _m.Called()

	var r0 []productbatch.ProductBatchesResponse
	if rf, ok := ret.Get(0).(func() []productbatch.ProductBatchesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productbatch.ProductBatchesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewServicePB interface {
	mock.TestingT
	Cleanup(func())
}

// NewServicePB creates a new instance of ServicePB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServicePB(t mockConstructorTestingTNewServicePB) *ServicePB {
	mock := &ServicePB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
