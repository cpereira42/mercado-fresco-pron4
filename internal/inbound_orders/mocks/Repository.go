// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	inbound_orders "github.com/cpereira42/mercado-fresco-pron4/internal/inbound_orders"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: createdAt, inboundOrders
func (_m *Repository) Create(createdAt string, inboundOrders inbound_orders.InboundOrdersCreate) (inbound_orders.InboundOrdersResponse, error) {
	ret := _m.Called(createdAt, inboundOrders)

	var r0 inbound_orders.InboundOrdersResponse
	if rf, ok := ret.Get(0).(func(string, inbound_orders.InboundOrdersCreate) inbound_orders.InboundOrdersResponse); ok {
		r0 = rf(createdAt, inboundOrders)
	} else {
		r0 = ret.Get(0).(inbound_orders.InboundOrdersResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, inbound_orders.InboundOrdersCreate) error); ok {
		r1 = rf(createdAt, inboundOrders)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]inbound_orders.ReportInboundOrders, error) {
	ret := _m.Called()

	var r0 []inbound_orders.ReportInboundOrders
	if rf, ok := ret.Get(0).(func() []inbound_orders.ReportInboundOrders); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]inbound_orders.ReportInboundOrders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id int) (inbound_orders.ReportInboundOrders, error) {
	ret := _m.Called(id)

	var r0 inbound_orders.ReportInboundOrders
	if rf, ok := ret.Get(0).(func(int) inbound_orders.ReportInboundOrders); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(inbound_orders.ReportInboundOrders)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
